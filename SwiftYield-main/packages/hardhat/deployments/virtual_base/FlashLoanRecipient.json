{
  "address": "0xAEF9024367Ed29e606dE713845f93A82882a84Ef",
  "abi": [
    {
      "inputs": [],
      "name": "hello",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "makeFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "pancakeswapTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "feeAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "receiveFlashLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "sushiswapTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "userData",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "uniswapTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xffb8784d3d885be7a5908714b338e231e41920cb4552c5bffde112dd5d6dc43c",
  "receipt": {
    "to": null,
    "from": "0x31884a8c321ca3E87aBe7691a949e427Bd6a8fE5",
    "contractAddress": "0xAEF9024367Ed29e606dE713845f93A82882a84Ef",
    "transactionIndex": 0,
    "gasUsed": "1218917",
    "logsBloom": "0x
    "blockHash": "0xbd75b75bfccee651d34f64c290ebc9a1d4940f4bb29efb79878f7867bb33d505",
    "transactionHash": "0xffb8784d3d885be7a5908714b338e231e41920cb4552c5bffde112dd5d6dc43c",
    "logs": [],
    "blockNumber": 18165525,
    "cumulativeGasUsed": "1218917",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "b7fa5afac00120748b206dc5daf8751d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"hello\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"makeFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"}],\"name\":\"pancakeswapTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"}],\"name\":\"sushiswapTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"}],\"name\":\"uniswapTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveFlashLoan(address[],uint256[],uint256[],bytes)\":{\"details\":\"When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FlashLoan.sol\":\"FlashLoanRecipient\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2d45ea7c14dc950acf5917377d9eb67d2b1d9f8b8d81fa60eeaad345cf257655\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x571907ff5a68a10937b13e0828dd78bf9508f6e74eaafe7faf525453160c3627\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\",\"keccak256\":\"0x7d98e4751329dd9effc016cbc5acdf6399d3592407b9d3e28b38c10c621e56a3\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x41c26d92fde92c927352c447ff80e3b2216d076662f2b222b735e4c865a481dc\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x3c415102b8b53a3efe0209b7fa4fd052a48b35a1df99e1b37572597d25030249\",\"license\":\"MIT\"},\"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\",\"keccak256\":\"0x780769a0bd8655d8a05a75b062b32a65b775b9deb923b2e8f42f57a0ee263a2d\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1407e18b806b109e6a878697d2942eeb17bfc6cc601da725941658b90dc9dcc6\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\",\"keccak256\":\"0xadcf6e9f8677de9ec51a1bbb419da349b7c0c17af8b8cddad85ee0e80107036e\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IProtocolFeesCollector {\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\n\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    function vault() external view returns (IVault);\\n}\\n\",\"keccak256\":\"0xe18a4e04a4a4e828c81548cc50d9d8ab6461dafbe88929c0342fa2b6c08e0d76\",\"license\":\"GPL-3.0-or-later\"},\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"../solidity-utils/helpers/IAuthentication.sol\\\";\\nimport \\\"../solidity-utils/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"../solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\nimport \\\"../solidity-utils/misc/IWETH.sol\\\";\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IProtocolFeesCollector.sol\\\";\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable, IAuthentication {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\",\"keccak256\":\"0x63425148b27356cee63cf843ef8918d3ff6cdd8d5c00371326bca8b4331b773c\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/FlashLoan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IVault} from \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\nimport {IFlashLoanRecipient} from \\\"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\\\";\\nimport {IERC20} from \\\"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\n\\ncontract FlashLoanRecipient is IFlashLoanRecipient {\\n    address public owner = msg.sender;\\n\\n    IVault private constant vault = IVault(0xBA12222222228d8Ba445958a75a0704d566BF2C8);\\n\\n    address private constant wethToken = 0x4200000000000000000000000000000000000006;\\n    uint256 private constant wethInput = 1000000000000000000; // 1 WETH Token\\n\\n    // Deployments are on Base Mainnet\\n\\n    IUniswapV2Router02 private constant uniswapRouter = IUniswapV2Router02(0x4752ba5DBc23f44D87826276BF6Fd6b1C372aD24);\\n    IUniswapV2Router02 private constant sushiswapRouter = IUniswapV2Router02(0x6BDED42c6DA8FBf0d2bA55B2fa120C5e0c8D7891);\\n    IUniswapV2Router02 private constant pancakeswapRouter = IUniswapV2Router02(0x8cFe327CEc66d1C090Dd72bd0FF11d690C33a2Eb);\\n\\n    // add other routers\\n\\n    function uniswapTokens( address _tokenIn, uint256 _amountIn, address _tokenOut, uint256 _amountOutMin ) public returns (uint256) {\\n        // require(msg.sender == owner, \\\"Only the owner can initiate swaps\\\");\\n        IERC20(_tokenIn).approve(address(uniswapRouter), _amountIn);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenIn;\\n        path[1] = _tokenOut;\\n\\n        uint256[] memory prices = uniswapRouter.swapExactTokensForTokens( _amountIn, _amountOutMin, path, address(this), block.timestamp );\\n        return prices[1];\\n    }\\n\\n    function sushiswapTokens( address _tokenIn, uint256 _amountIn, address _tokenOut, uint256 _amountOutMin ) public returns (uint256) {\\n        // require(msg.sender == owner, \\\"Only the owner can initiate swaps\\\");\\n        IERC20(_tokenIn).approve(address(sushiswapRouter), _amountIn);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenIn;\\n        path[1] = _tokenOut;\\n\\n        uint256[] memory prices = sushiswapRouter.swapExactTokensForTokens( _amountIn, _amountOutMin, path, address(this), block.timestamp );\\n        return prices[1];\\n    }\\n\\n    function pancakeswapTokens( address _tokenIn, uint256 _amountIn, address _tokenOut, uint256 _amountOutMin ) public returns (uint256) {\\n        // require(msg.sender == owner, \\\"Only the owner can initiate swaps\\\");\\n        IERC20(_tokenIn).approve(address(pancakeswapRouter), _amountIn);\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenIn;\\n        path[1] = _tokenOut;\\n\\n        uint256[] memory prices = pancakeswapRouter.swapExactTokensForTokens( _amountIn, _amountOutMin, path, address(this), block.timestamp );\\n        return prices[1];\\n    }\\n\\n    function hello() public pure returns (string memory) {\\n        return string(\\\"Your Contract is deployed successfully, connect it to the bot\\\");\\n    }\\n\\n    function makeFlashLoan( IERC20[] memory tokens, uint256[] memory amounts, bytes memory userData) external {\\n        vault.flashLoan(this, tokens, amounts, userData);\\n    }\\n\\n    function receiveFlashLoan( IERC20[] memory tokens, uint256[] memory amounts, uint256[] memory feeAmounts, bytes memory userData ) external override {\\n        require(msg.sender == address(vault));\\n        // This contract now has the funds requested.\\n\\n        swap(userData);\\n\\n        // This contract now owes the flashloaned amounts + feeAmounts. Ensure the contract has enough to repay these amounts.\\n\\n        // Return loan\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            tokens[i].transfer(address(vault), amounts[i] + feeAmounts[i]);\\n        }\\n    }\\n\\n    function swap( bytes memory userData) public {\\n        address swapTokenAddress;\\n\\n        assembly {\\n            swapTokenAddress := mload(add(userData, 22))\\n        }\\n\\n        // here this should be calculated properly like this should be in no of bytes that amount is equal to \\n        // not the number of numbers, if its a odd number pad a zero in the beginning\\n        uint8 token1AmountLength = uint8(userData[22]); \\n        uint8 token2AmountLength = uint8(userData[23]);\\n\\n        bytes memory token1AmountBytes = new bytes(token1AmountLength);\\n        bytes memory token2AmountBytes = new bytes(token2AmountLength);    \\n\\n        uint j = 0;\\n\\n        for (uint i = (userData.length - token2AmountLength - token1AmountLength); i < (userData.length - token2AmountLength); i++) {\\n            token1AmountBytes[j] = userData[i];\\n            j++;\\n        }\\n\\n        uint token1Amount;\\n\\n        for(uint i = 0; i < token1AmountBytes.length; i++){\\n            token1Amount = token1Amount + uint(uint8(token1AmountBytes[i]))*(2**(8*(token1AmountBytes.length-(i+1))));\\n        }\\n\\n        uint k = 0;\\n\\n        for (uint i = (userData.length - token2AmountLength); i < (userData.length); i++) {\\n            token2AmountBytes[k] = userData[i];\\n            k++;\\n        }\\n\\n        uint token2Amount;\\n\\n        for(uint i = 0; i < token2AmountBytes.length; i++){\\n            token2Amount = token2Amount + uint(uint8(token2AmountBytes[i]))*(2**(8*(token2AmountBytes.length-(i+1))));\\n        }\\n\\n        if (userData[0] == 0x01) {\\n            if (userData[1] == 0x02) {\\n                uint256 uniswapReturns = uniswapTokens( wethToken, wethInput, swapTokenAddress, token1Amount);\\n                sushiswapTokens(swapTokenAddress, uniswapReturns, wethToken, token2Amount);\\n            } else if (userData[1] == 0x03) {\\n                uint256 uniswapReturns = uniswapTokens( wethToken, wethInput, swapTokenAddress, token1Amount);\\n                pancakeswapTokens(swapTokenAddress, uniswapReturns, wethToken, token2Amount);\\n            }\\n        } else if (userData[0] == 0x02) {\\n            if (userData[1] == 0x01) {\\n                uint256 sushiswapReturns = sushiswapTokens( wethToken, wethInput, swapTokenAddress, token1Amount );\\n                uniswapTokens(swapTokenAddress, sushiswapReturns, wethToken, token2Amount);\\n            } else if (userData[1] == 0x03) {\\n                uint256 sushiswapReturns = sushiswapTokens( wethToken, wethInput, swapTokenAddress, token1Amount );\\n                pancakeswapTokens( swapTokenAddress, sushiswapReturns, wethToken, token2Amount );\\n            }\\n        } else if (userData[0] == 0x03) {\\n            if (userData[1] == 0x01) {\\n                uint256 pancakeReturns = pancakeswapTokens( wethToken, wethInput, swapTokenAddress, token1Amount );\\n                uniswapTokens(swapTokenAddress, pancakeReturns, wethToken, token2Amount);\\n            } else if (userData[1] == 0x02) {\\n                uint256 pancakeReturns = pancakeswapTokens( wethToken, wethInput, swapTokenAddress, token1Amount );\\n                sushiswapTokens(swapTokenAddress, pancakeReturns, wethToken, token2Amount);\\n            }\\n        }\\n    }\\n\\n    // function withdraw(params) {\\n    //     code\\n    // }\\n\\n    // To determine the First exchange where\\n    // 0x01 -> uniswap\\n    // 0x02 -> sushiswap\\n    // 0x03 -> pancakeswap\\n\\n    // To determine the Second exchange where\\n    // 0x0101 -> uniswap\\n    // 0x0202 -> sushiswap\\n    // 0x0303 -> pancakeswap\\n\\n    // 0x010250c5725949A6F0c72E6C4a641F24049A917DB0Cb -> Next 20 bytes/40 Hex characters is token out address\\n\\n    // 0x010250c5725949A6F0c72E6C4a641F24049A917DB0Cb Till here 22 bytes will be over\\n\\n    // Now from 23 bytes upto data.length\\n\\n    // 0x010250c5725949A6F0c72E6C4a641F24049A917DB0Cb07 -> 1st conversion rate length 23th byte\\n\\n    // 0x010250c5725949A6F0c72E6C4a641F24049A917DB0Cb0708 -> 2nd conversion rate length 24th byte\\n\\n    // This expected values should be hex encoded \\n\\n    // 0x010250c5725949A6F0c72E6C4a641F24049A917DB0Cb070832240000000000 -> 1st conversion rate\\n\\n    // 0x010250c5725949A6F0c72E6C4a641F24049A917DB0Cb0708322400000000008000000000000000 -> 2nd conversion rate\\n\\n    // 0x010250c5725949A6F0c72E6C4a641F24049A917DB0Cb01010000\\n}\\n\\n\",\"keccak256\":\"0x876ae5ff9a80d149a4ec63603a91be61ed0694598a3fe9e3ad2c3b1ecf47abea\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600080546001600160a01b0319163317905534801561002257600080fd5b506114ae806100326000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100f4578063c9a695621461011f578063eee45b2514610132578063f04f27071461014557600080fd5b806319ff1d211461008d5780634352a576146100ab578063551905cd146100cc578063627dd56a146100df575b600080fd5b610095610158565b6040516100a29190610d6d565b60405180910390f35b6100be6100b9366004610d9f565b610178565b6040519081526020016100a2565b6100be6100da366004610d9f565b610334565b6100f26100ed366004610e9e565b610480565b005b600054610107906001600160a01b031681565b6040516001600160a01b0390911681526020016100a2565b6100f261012d366004610fce565b610a2e565b6100be610140366004610d9f565b610aa2565b6100f2610153366004611056565b610bee565b60606040518060600160405280603d815260200161143c603d9139905090565b60405163095ea7b360e01b8152734752ba5dbc23f44d87826276bf6fd6b1c372ad246004820152602481018490526000906001600160a01b0386169063095ea7b3906044016020604051808303816000875af11580156101dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102009190611103565b50604080516002808252606082018352600092602083019080368337019050509050858160008151811061023657610236611125565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061026a5761026a611125565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b8152600090734752ba5dbc23f44d87826276bf6fd6b1c372ad24906338ed1739906102c4908990889087903090429060040161113b565b6000604051808303816000875af11580156102e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261030b91908101906111ac565b90508060018151811061032057610320611125565b602002602001015192505050949350505050565b60405163095ea7b360e01b8152736bded42c6da8fbf0d2ba55b2fa120c5e0c8d78916004820152602481018490526000906001600160a01b0386169063095ea7b3906044016020604051808303816000875af1158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bc9190611103565b5060408051600280825260608201835260009260208301908036833701905050905085816000815181106103f2576103f2611125565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061042657610426611125565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b8152600090736bded42c6da8fbf0d2ba55b2fa120c5e0c8d7891906338ed1739906102c4908990889087903090429060040161113b565b60006016820151905060008260168151811061049e5761049e611125565b602001015160f81c60f81b60f81c90506000836017815181106104c3576104c3611125565b016020015160f81c9050600060ff831667ffffffffffffffff8111156104eb576104eb610de7565b6040519080825280601f01601f191660200182016040528015610515576020820181803683370190505b50905060008260ff1667ffffffffffffffff81111561053657610536610de7565b6040519080825280601f01601f191660200182016040528015610560576020820181803683370190505b5090506000808560ff168560ff16895161057a9190611253565b6105849190611253565b90505b8460ff1688516105979190611253565b811015610604578781815181106105b0576105b0611125565b602001015160f81c60f81b8483815181106105cd576105cd611125565b60200101906001600160f81b031916908160001a905350816105ee8161126c565b92505080806105fc9061126c565b915050610587565b506000805b84518110156106815761061d816001611285565b85516106299190611253565b610634906008611298565b61063f906002611393565b85828151811061065157610651611125565b0160200151610663919060f81c611298565b61066d9083611285565b9150806106798161126c565b915050610609565b506000808660ff168a516106959190611253565b90505b8951811015610707578981815181106106b3576106b3611125565b602001015160f81c60f81b8583815181106106d0576106d0611125565b60200101906001600160f81b031916908160001a905350816106f18161126c565b92505080806106ff9061126c565b915050610698565b506000805b855181101561078457610720816001611285565b865161072c9190611253565b610737906008611298565b610742906002611393565b86828151811061075457610754611125565b0160200151610766919060f81c611298565b6107709083611285565b91508061077c8161126c565b91505061070c565b508960008151811061079857610798611125565b01602001516001600160f81b031916600160f81b0361087957896001815181106107c4576107c4611125565b01602001516001600160f81b031916600160f91b036108165760006107fa6006602160991b01670de0b6b3a76400008c87610178565b905061080f8a826006602160991b0185610334565b5050610a22565b8960018151811061082957610829611125565b01602001516001600160f81b031916600360f81b0361087457600061085f6006602160991b01670de0b6b3a76400008c87610178565b905061080f8a826006602160991b0185610aa2565b610a22565b8960008151811061088c5761088c611125565b01602001516001600160f81b031916600160f91b0361094c57896001815181106108b8576108b8611125565b01602001516001600160f81b031916600160f81b036109035760006108ee6006602160991b01670de0b6b3a76400008c87610334565b905061080f8a826006602160991b0185610178565b8960018151811061091657610916611125565b01602001516001600160f81b031916600360f81b0361087457600061085f6006602160991b01670de0b6b3a76400008c87610334565b8960008151811061095f5761095f611125565b01602001516001600160f81b031916600360f81b03610a22578960018151811061098b5761098b611125565b01602001516001600160f81b031916600160f81b036109c15760006108ee6006602160991b01670de0b6b3a76400008c87610aa2565b896001815181106109d4576109d4611125565b01602001516001600160f81b031916600160f91b03610a22576000610a0a6006602160991b01670de0b6b3a76400008c87610aa2565b9050610a1f8a826006602160991b0185610334565b50505b50505050505050505050565b604051632e1c224f60e11b815273ba12222222228d8ba445958a75a0704d566bf2c890635c38449e90610a6b90309087908790879060040161139f565b600060405180830381600087803b158015610a8557600080fd5b505af1158015610a99573d6000803e3d6000fd5b50505050505050565b60405163095ea7b360e01b8152738cfe327cec66d1c090dd72bd0ff11d690c33a2eb6004820152602481018490526000906001600160a01b0386169063095ea7b3906044016020604051808303816000875af1158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a9190611103565b506040805160028082526060820183526000926020830190803683370190505090508581600081518110610b6057610b60611125565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110610b9457610b94611125565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b8152600090738cfe327cec66d1c090dd72bd0ff11d690c33a2eb906338ed1739906102c4908990889087903090429060040161113b565b3373ba12222222228d8ba445958a75a0704d566bf2c814610c0e57600080fd5b610c1781610480565b60005b8451811015610d2057848181518110610c3557610c35611125565b60200260200101516001600160a01b031663a9059cbb73ba12222222228d8ba445958a75a0704d566bf2c8858481518110610c7257610c72611125565b6020026020010151878581518110610c8c57610c8c611125565b6020026020010151610c9e9190611285565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0d9190611103565b5080610d188161126c565b915050610c1a565b5050505050565b6000815180845260005b81811015610d4d57602081850181015186830182015201610d31565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610d806020830184610d27565b9392505050565b6001600160a01b0381168114610d9c57600080fd5b50565b60008060008060808587031215610db557600080fd5b8435610dc081610d87565b9350602085013592506040850135610dd781610d87565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e2657610e26610de7565b604052919050565b600082601f830112610e3f57600080fd5b813567ffffffffffffffff811115610e5957610e59610de7565b610e6c601f8201601f1916602001610dfd565b818152846020838601011115610e8157600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610eb057600080fd5b813567ffffffffffffffff811115610ec757600080fd5b610ed384828501610e2e565b949350505050565b600067ffffffffffffffff821115610ef557610ef5610de7565b5060051b60200190565b600082601f830112610f1057600080fd5b81356020610f25610f2083610edb565b610dfd565b82815260059290921b84018101918181019086841115610f4457600080fd5b8286015b84811015610f68578035610f5b81610d87565b8352918301918301610f48565b509695505050505050565b600082601f830112610f8457600080fd5b81356020610f94610f2083610edb565b82815260059290921b84018101918181019086841115610fb357600080fd5b8286015b84811015610f685780358352918301918301610fb7565b600080600060608486031215610fe357600080fd5b833567ffffffffffffffff80821115610ffb57600080fd5b61100787838801610eff565b9450602086013591508082111561101d57600080fd5b61102987838801610f73565b9350604086013591508082111561103f57600080fd5b5061104c86828701610e2e565b9150509250925092565b6000806000806080858703121561106c57600080fd5b843567ffffffffffffffff8082111561108457600080fd5b61109088838901610eff565b955060208701359150808211156110a657600080fd5b6110b288838901610f73565b945060408701359150808211156110c857600080fd5b6110d488838901610f73565b935060608701359150808211156110ea57600080fd5b506110f787828801610e2e565b91505092959194509250565b60006020828403121561111557600080fd5b81518015158114610d8057600080fd5b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561118b5784516001600160a01b031683529383019391830191600101611166565b50506001600160a01b03969096166060850152505050608001529392505050565b600060208083850312156111bf57600080fd5b825167ffffffffffffffff8111156111d657600080fd5b8301601f810185136111e757600080fd5b80516111f5610f2082610edb565b81815260059190911b8201830190838101908783111561121457600080fd5b928401925b8284101561123257835182529284019290840190611219565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156112665761126661123d565b92915050565b60006001820161127e5761127e61123d565b5060010190565b808201808211156112665761126661123d565b80820281158282048414176112665761126661123d565b600181815b808511156112ea5781600019048211156112d0576112d061123d565b808516156112dd57918102915b93841c93908002906112b4565b509250929050565b60008261130157506001611266565b8161130e57506000611266565b8160018114611324576002811461132e5761134a565b6001915050611266565b60ff84111561133f5761133f61123d565b50506001821b611266565b5060208310610133831016604e8410600b841016171561136d575081810a611266565b61137783836112af565b806000190482111561138b5761138b61123d565b029392505050565b6000610d8083836112f2565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b818110156113ed5785518516835294830194918301916001016113cf565b5050858103604087015287518082529082019350915080870160005b8381101561142557815185529382019390820190600101611409565b5050505082810360608401526112328185610d2756fe596f757220436f6e7472616374206973206465706c6f796564207375636365737366756c6c792c20636f6e6e65637420697420746f2074686520626f74a26469706673582212209ac06b64f28542cc968385ad1d29e885c60948759c2dd03d58d096f87669fc1464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100f4578063c9a695621461011f578063eee45b2514610132578063f04f27071461014557600080fd5b806319ff1d211461008d5780634352a576146100ab578063551905cd146100cc578063627dd56a146100df575b600080fd5b610095610158565b6040516100a29190610d6d565b60405180910390f35b6100be6100b9366004610d9f565b610178565b6040519081526020016100a2565b6100be6100da366004610d9f565b610334565b6100f26100ed366004610e9e565b610480565b005b600054610107906001600160a01b031681565b6040516001600160a01b0390911681526020016100a2565b6100f261012d366004610fce565b610a2e565b6100be610140366004610d9f565b610aa2565b6100f2610153366004611056565b610bee565b60606040518060600160405280603d815260200161143c603d9139905090565b60405163095ea7b360e01b8152734752ba5dbc23f44d87826276bf6fd6b1c372ad246004820152602481018490526000906001600160a01b0386169063095ea7b3906044016020604051808303816000875af11580156101dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102009190611103565b50604080516002808252606082018352600092602083019080368337019050509050858160008151811061023657610236611125565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061026a5761026a611125565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b8152600090734752ba5dbc23f44d87826276bf6fd6b1c372ad24906338ed1739906102c4908990889087903090429060040161113b565b6000604051808303816000875af11580156102e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261030b91908101906111ac565b90508060018151811061032057610320611125565b602002602001015192505050949350505050565b60405163095ea7b360e01b8152736bded42c6da8fbf0d2ba55b2fa120c5e0c8d78916004820152602481018490526000906001600160a01b0386169063095ea7b3906044016020604051808303816000875af1158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bc9190611103565b5060408051600280825260608201835260009260208301908036833701905050905085816000815181106103f2576103f2611125565b60200260200101906001600160a01b031690816001600160a01b031681525050838160018151811061042657610426611125565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b8152600090736bded42c6da8fbf0d2ba55b2fa120c5e0c8d7891906338ed1739906102c4908990889087903090429060040161113b565b60006016820151905060008260168151811061049e5761049e611125565b602001015160f81c60f81b60f81c90506000836017815181106104c3576104c3611125565b016020015160f81c9050600060ff831667ffffffffffffffff8111156104eb576104eb610de7565b6040519080825280601f01601f191660200182016040528015610515576020820181803683370190505b50905060008260ff1667ffffffffffffffff81111561053657610536610de7565b6040519080825280601f01601f191660200182016040528015610560576020820181803683370190505b5090506000808560ff168560ff16895161057a9190611253565b6105849190611253565b90505b8460ff1688516105979190611253565b811015610604578781815181106105b0576105b0611125565b602001015160f81c60f81b8483815181106105cd576105cd611125565b60200101906001600160f81b031916908160001a905350816105ee8161126c565b92505080806105fc9061126c565b915050610587565b506000805b84518110156106815761061d816001611285565b85516106299190611253565b610634906008611298565b61063f906002611393565b85828151811061065157610651611125565b0160200151610663919060f81c611298565b61066d9083611285565b9150806106798161126c565b915050610609565b506000808660ff168a516106959190611253565b90505b8951811015610707578981815181106106b3576106b3611125565b602001015160f81c60f81b8583815181106106d0576106d0611125565b60200101906001600160f81b031916908160001a905350816106f18161126c565b92505080806106ff9061126c565b915050610698565b506000805b855181101561078457610720816001611285565b865161072c9190611253565b610737906008611298565b610742906002611393565b86828151811061075457610754611125565b0160200151610766919060f81c611298565b6107709083611285565b91508061077c8161126c565b91505061070c565b508960008151811061079857610798611125565b01602001516001600160f81b031916600160f81b0361087957896001815181106107c4576107c4611125565b01602001516001600160f81b031916600160f91b036108165760006107fa6006602160991b01670de0b6b3a76400008c87610178565b905061080f8a826006602160991b0185610334565b5050610a22565b8960018151811061082957610829611125565b01602001516001600160f81b031916600360f81b0361087457600061085f6006602160991b01670de0b6b3a76400008c87610178565b905061080f8a826006602160991b0185610aa2565b610a22565b8960008151811061088c5761088c611125565b01602001516001600160f81b031916600160f91b0361094c57896001815181106108b8576108b8611125565b01602001516001600160f81b031916600160f81b036109035760006108ee6006602160991b01670de0b6b3a76400008c87610334565b905061080f8a826006602160991b0185610178565b8960018151811061091657610916611125565b01602001516001600160f81b031916600360f81b0361087457600061085f6006602160991b01670de0b6b3a76400008c87610334565b8960008151811061095f5761095f611125565b01602001516001600160f81b031916600360f81b03610a22578960018151811061098b5761098b611125565b01602001516001600160f81b031916600160f81b036109c15760006108ee6006602160991b01670de0b6b3a76400008c87610aa2565b896001815181106109d4576109d4611125565b01602001516001600160f81b031916600160f91b03610a22576000610a0a6006602160991b01670de0b6b3a76400008c87610aa2565b9050610a1f8a826006602160991b0185610334565b50505b50505050505050505050565b604051632e1c224f60e11b815273ba12222222228d8ba445958a75a0704d566bf2c890635c38449e90610a6b90309087908790879060040161139f565b600060405180830381600087803b158015610a8557600080fd5b505af1158015610a99573d6000803e3d6000fd5b50505050505050565b60405163095ea7b360e01b8152738cfe327cec66d1c090dd72bd0ff11d690c33a2eb6004820152602481018490526000906001600160a01b0386169063095ea7b3906044016020604051808303816000875af1158015610b06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2a9190611103565b506040805160028082526060820183526000926020830190803683370190505090508581600081518110610b6057610b60611125565b60200260200101906001600160a01b031690816001600160a01b0316815250508381600181518110610b9457610b94611125565b6001600160a01b03909216602092830291909101909101526040516338ed173960e01b8152600090738cfe327cec66d1c090dd72bd0ff11d690c33a2eb906338ed1739906102c4908990889087903090429060040161113b565b3373ba12222222228d8ba445958a75a0704d566bf2c814610c0e57600080fd5b610c1781610480565b60005b8451811015610d2057848181518110610c3557610c35611125565b60200260200101516001600160a01b031663a9059cbb73ba12222222228d8ba445958a75a0704d566bf2c8858481518110610c7257610c72611125565b6020026020010151878581518110610c8c57610c8c611125565b6020026020010151610c9e9190611285565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610ce9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0d9190611103565b5080610d188161126c565b915050610c1a565b5050505050565b6000815180845260005b81811015610d4d57602081850181015186830182015201610d31565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610d806020830184610d27565b9392505050565b6001600160a01b0381168114610d9c57600080fd5b50565b60008060008060808587031215610db557600080fd5b8435610dc081610d87565b9350602085013592506040850135610dd781610d87565b9396929550929360600135925050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610e2657610e26610de7565b604052919050565b600082601f830112610e3f57600080fd5b813567ffffffffffffffff811115610e5957610e59610de7565b610e6c601f8201601f1916602001610dfd565b818152846020838601011115610e8157600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610eb057600080fd5b813567ffffffffffffffff811115610ec757600080fd5b610ed384828501610e2e565b949350505050565b600067ffffffffffffffff821115610ef557610ef5610de7565b5060051b60200190565b600082601f830112610f1057600080fd5b81356020610f25610f2083610edb565b610dfd565b82815260059290921b84018101918181019086841115610f4457600080fd5b8286015b84811015610f68578035610f5b81610d87565b8352918301918301610f48565b509695505050505050565b600082601f830112610f8457600080fd5b81356020610f94610f2083610edb565b82815260059290921b84018101918181019086841115610fb357600080fd5b8286015b84811015610f685780358352918301918301610fb7565b600080600060608486031215610fe357600080fd5b833567ffffffffffffffff80821115610ffb57600080fd5b61100787838801610eff565b9450602086013591508082111561101d57600080fd5b61102987838801610f73565b9350604086013591508082111561103f57600080fd5b5061104c86828701610e2e565b9150509250925092565b6000806000806080858703121561106c57600080fd5b843567ffffffffffffffff8082111561108457600080fd5b61109088838901610eff565b955060208701359150808211156110a657600080fd5b6110b288838901610f73565b945060408701359150808211156110c857600080fd5b6110d488838901610f73565b935060608701359150808211156110ea57600080fd5b506110f787828801610e2e565b91505092959194509250565b60006020828403121561111557600080fd5b81518015158114610d8057600080fd5b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561118b5784516001600160a01b031683529383019391830191600101611166565b50506001600160a01b03969096166060850152505050608001529392505050565b600060208083850312156111bf57600080fd5b825167ffffffffffffffff8111156111d657600080fd5b8301601f810185136111e757600080fd5b80516111f5610f2082610edb565b81815260059190911b8201830190838101908783111561121457600080fd5b928401925b8284101561123257835182529284019290840190611219565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b818103818111156112665761126661123d565b92915050565b60006001820161127e5761127e61123d565b5060010190565b808201808211156112665761126661123d565b80820281158282048414176112665761126661123d565b600181815b808511156112ea5781600019048211156112d0576112d061123d565b808516156112dd57918102915b93841c93908002906112b4565b509250929050565b60008261130157506001611266565b8161130e57506000611266565b8160018114611324576002811461132e5761134a565b6001915050611266565b60ff84111561133f5761133f61123d565b50506001821b611266565b5060208310610133831016604e8410600b841016171561136d575081810a611266565b61137783836112af565b806000190482111561138b5761138b61123d565b029392505050565b6000610d8083836112f2565b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b818110156113ed5785518516835294830194918301916001016113cf565b5050858103604087015287518082529082019350915080870160005b8381101561142557815185529382019390820190600101611409565b5050505082810360608401526112328185610d2756fe596f757220436f6e7472616374206973206465706c6f796564207375636365737366756c6c792c20636f6e6e65637420697420746f2074686520626f74a26469706673582212209ac06b64f28542cc968385ad1d29e885c60948759c2dd03d58d096f87669fc1464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "receiveFlashLoan(address[],uint256[],uint256[],bytes)": {
        "details": "When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient. At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the Vault, or else the entire flash loan will revert. `userData` is the same value passed in the `IVault.flashLoan` call."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1173,
        "contract": "contracts/FlashLoan.sol:FlashLoanRecipient",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}